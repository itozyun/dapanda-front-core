/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.4.2/samples
 */
plugins {
    id 'java'
}

group 'dapanda.front'
version '0.1.0'

apply plugin: 'application'

repositories {
    mavenLocal()
    maven {
        url 'https://raw.github.com/uedaueo/blancofw-maven2/gh-pages-v3/'
    }
    mavenCentral()
}

configurations {
    blancoFramework
}

dependencies {
    blancoFramework 'blanco.restgeneratorts:blanco-restgeneratorts:[3.0,4.0)'
    blancoFramework 'blanco.pinia:blanco-pinia:[3.0,4.0)'
    blancoFramework 'blanco.vuecomponent:blanco-vuecomponent:[3.0,4.0)'
    blancoFramework 'blanco.veevalidate:blanco-veevalidate:[3.0,4.0)'
}

task metaObjects {
    logging.captureStandardOutput LogLevel.INFO
    group "blanco"
    description "Generate valueobjects source for typescript by blancoValueObjectTs"
    doFirst {
        println 'A task message which is logged at INFO level'
    }
    doLast {
        ant.taskdef(name: 'blancovalueobjectts',
                classname: 'blanco.valueobjectts.task.BlancoValueObjectTsTask',
                classpath: configurations.blancoFramework.asPath
        )
        ant.blancovalueobjectts(metadir: "${projectDir}" + getProperty("blanco.metadir") + "/meta/objects",
                tmpdir: "${buildDir}/tmpObjects",
                targetdir: "${projectDir}/blanco",
                targetStyle: "maven",
                sheetType: 'php',
                tabs: 4,
                lineSeparator: 'LF',
                verbose: true,
                generateToJson: true,
                encoding: getProperty("blanco.encoding")
        )
    }
}


task metaTelegrams {
    dependsOn "metaStores"
    logging.captureStandardOutput LogLevel.INFO
    group "blanco"
    description "Generate API object source for typescript by blancoRestGeneratorTs"
    doFirst {
        println 'A task message which is logged at INFO level'
    }
    doLast {
        ant.taskdef(name: 'blancovalueobjectts',
                classname: 'blanco.valueobjectts.task.BlancoValueObjectTsTask',
                classpath: configurations.blancoFramework.asPath
        )
        ant.taskdef(name: 'blancorestgeneratorts',
                classname: 'blanco.restgeneratorts.task.BlancoRestGeneratorTsTask',
                classpath: configurations.blancoFramework.asPath
        )
        /* telegrams */
        ant.blancovalueobjectts(metadir: "${projectDir}" + getProperty("blanco.metadir") + "/meta/telegrams",
                tmpdir: "${buildDir}/tmpTelegrams",
                targetdir: "${projectDir}/blanco",
                targetStyle: "maven",
                sheetType: 'php',
                tabs: 4,
                lineSeparator: 'LF',
                verbose: true,
                generateToJson: true,
                encoding: getProperty("blanco.encoding")
        )
        /*
         * API
         * create empty dir tmpApiSamles/valueobjectts because blancoRestGeneratorTs is
         * default search the directory for API parmaeter objects.
         */
        new File("${buildDir}/tmpApiSamples/valueobjectts").mkdirs();
        ant.blancorestgeneratorts(metadir: "${projectDir}" + getProperty("blanco.metadir") + "/meta/api",
                tmpdir: "${buildDir}/tmpApiSamples",
                targetdir: "${projectDir}/blanco",
                targetStyle: "maven",
                sheetType: 'php',
                encoding: getProperty("blanco.encoding"),
                verbose: "true",
                generateToJson: true,
                tabs: 4,
                searchTmpdir: "${buildDir}/tmpObjects,${buildDir}/tmpTelegrams",
                lineSeparator: 'LF',
                processlist: "samples.SampleApiList",
                processlistBase: "@",
                client: "true"
        )
    }
}

task metaTelegramsPlain {
    dependsOn "metaTelegrams"
    logging.captureStandardOutput LogLevel.INFO
    group "blanco"
    description "Generate plain API object source for typescript by blancoRestGeneratorTs"
    doFirst {
        println 'A task message which is logged at INFO level'
    }
    doLast {
        ant.taskdef(name: 'blancovalueobjectts',
                classname: 'blanco.valueobjectts.task.BlancoValueObjectTsTask',
                classpath: configurations.blancoFramework.asPath
        )
        ant.taskdef(name: 'blancorestgeneratorts',
                classname: 'blanco.restgeneratorts.task.BlancoRestGeneratorTsTask',
                classpath: configurations.blancoFramework.asPath
        )
//        /* telegrams */
//        ant.blancovalueobjectts(metadir: "${projectDir}" + getProperty("blanco.metadir") + "/meta/telegrams",
//                tmpdir: "${buildDir}/tmpTelegrams",
//                targetdir: "${projectDir}/blanco",
//                targetStyle: "maven",
//                sheetType: 'php',
//                tabs: 4,
//                lineSeparator: 'LF',
//                verbose: true,
//                generateToJson: true,
//                encoding: getProperty("blanco.encoding")
//        )
        /*
         * API
         * create empty dir tmpApiSamles/valueobjectts because blancoRestGeneratorTs is
         * default search the directory for API parmaeter objects.
         */
        new File("${buildDir}/tmpApiPlainSamples/valueobjectts").mkdirs();
        ant.blancorestgeneratorts(metadir: "${projectDir}" + getProperty("blanco.metadir") + "/meta/apiPlain",
                tmpdir: "${buildDir}/tmpApiPlainSamples",
                targetdir: "${projectDir}/blanco",
                targetStyle: "maven",
                sheetType: 'php',
                encoding: getProperty("blanco.encoding"),
                verbose: "true",
                generateToJson: true,
                tabs: 4,
                searchTmpdir: "${buildDir}/tmpObjects,${buildDir}/tmpTelegrams",
                lineSeparator: 'LF',
                processlist: "samples.SamplePlainApiList",
                processlistBase: "@",
                client: "true",
                telegramStyle: "plain"
        )
    }
}

task metaLabels {
    dependsOn "metaObjects"
    logging.captureStandardOutput LogLevel.INFO
    group "blanco"
    description "Generate labels for typescript by blancoValueObjectTs"
    doFirst {
        println 'A task message which is logged at INFO level'
    }
    doLast {
        ant.taskdef(name: 'blancovalueobjectts',
                classname: 'blanco.valueobjectts.task.BlancoValueObjectTsTask',
                classpath: configurations.blancoFramework.asPath
        )
        ant.blancovalueobjectts(metadir: "${projectDir}/meta/labels/ja",
                tmpdir: "${buildDir}/tmpLabelsJa",
                targetdir: "${projectDir}/blanco/main/typescript",
                targetStyle: "free",
                sheetType: 'php',
                tabs: 4,
                lineSeparator: 'LF',
                listClass: "LabelsJa",
                verbose: true,
                encoding: getProperty("blanco.encoding")
        )
        ant.blancovalueobjectts(metadir: "${projectDir}/meta/labels/en",
                tmpdir: "${buildDir}/tmpLabelsEn",
                targetdir: "${projectDir}/blanco/main/typescript",
                targetStyle: "free",
                sheetType: 'php',
                tabs: 4,
                lineSeparator: 'LF',
                listClass: "LabelsEn",
                verbose: true,
                encoding: getProperty("blanco.encoding")
        )
    }
}

task metaStores {
    dependsOn "metaObjects"
    logging.captureStandardOutput LogLevel.INFO
    group "blanco"
    description "Generate stores for Pinia"
    doFirst {
        println 'A task message which is logged at INFO level'
    }
    doLast {
        ant.taskdef(name: 'blancopinia',
                classname: 'blanco.pinia.task.BlancoPiniaTask',
                classpath: configurations.blancoFramework.asPath
        )
        ant.blancopinia(metadir: "${projectDir}/meta/stores",
                tmpdir: "${buildDir}/tmpStores",
                targetdir: "${projectDir}/blanco/main/typescript",
                targetStyle: "free",
                sheetType: 'php',
                tabs: 4,
                lineSeparator: 'LF',
                verbose: true,
                searchTmpdir: "${buildDir}/tmpObjects",
                encoding: getProperty("blanco.encoding")
        )
    }
}

task metaMessages {
    logging.captureStandardOutput LogLevel.INFO
    group "blanco"
    description "Generate messages for typescript by blancoValueObjectTs"
    doFirst {
        println 'A task message which is logged at INFO level'
    }
    doLast {
        ant.taskdef(name: 'blancovalueobjectts',
                classname: 'blanco.valueobjectts.task.BlancoValueObjectTsTask',
                classpath: configurations.blancoFramework.asPath
        )
        ant.blancovalueobjectts(metadir: "${projectDir}" + getProperty("blanco.metadir") + "/meta/messages/ja",
                tmpdir: "${buildDir}/tmpMessagesJa",
                targetdir: "${projectDir}/blanco/main/typescript",
                targetStyle: "free",
                sheetType: 'php',
                tabs: 4,
                lineSeparator: 'LF',
                verbose: true,
                encoding: getProperty("blanco.encoding")
        )
        ant.blancovalueobjectts(metadir: "${projectDir}" + getProperty("blanco.metadir") + "/meta/messages/en",
                tmpdir: "${buildDir}/tmpMessagesEn",
                targetdir: "${projectDir}/blanco/main/typescript",
                targetStyle: "free",
                sheetType: 'php',
                tabs: 4,
                lineSeparator: 'LF',
                verbose: true,
                encoding: getProperty("blanco.encoding")
        )
    }
}

task metaComponents {
    dependsOn "metaTelegramsPlain"
    logging.captureStandardOutput LogLevel.INFO
    group "blanco"
    description "Generate vue components for typescript by blancoVueComponent"
    doFirst {
        println 'A task message which is logged at INFO level'
    }
    doLast {
        ant.taskdef(name: 'blancovuecomponent',
                classname: 'blanco.vuecomponent.task.BlancoVueComponentTask',
                classpath: configurations.blancoFramework.asPath
        )
        ant.blancovuecomponent(metadir: "${projectDir}" + "/meta/components",
                tmpdir: "${buildDir}/tmpComponents",
                targetdir: "${projectDir}/blanco/main/typescript",
                targetStyle: "free",
                sheetType: 'php',
                encoding: getProperty("blanco.encoding"),
                verbose: "true",
                tabs: 4,
                searchTmpdir: "${buildDir}/tmpObjects",
                lineSeparator: 'LF',
                listClass: ""
        )
        ant.blancovuecomponent(metadir: "${projectDir}" + "/meta/samples/components",
                tmpdir: "${buildDir}/tmpComponents",
                targetdir: "${projectDir}/blanco/main/typescript",
                targetStyle: "free",
                sheetType: 'php',
                encoding: getProperty("blanco.encoding"),
                verbose: "true",
                tabs: 4,
                searchTmpdir: "${buildDir}/tmpObjects",
                lineSeparator: 'LF',
                listClass: ""
        )
    }
}

task metaPages {
    dependsOn "metaComponents"
    logging.captureStandardOutput LogLevel.INFO
    group "blanco"
    description "Generate vue components for typescript by blancoVueComponent"
    doFirst {
        println 'A task message which is logged at INFO level'
    }
    doLast {
        ant.taskdef(name: 'blancovuecomponent',
                classname: 'blanco.vuecomponent.task.BlancoVueComponentTask',
                classpath: configurations.blancoFramework.asPath
        )
//        ant.blancovuecomponent(metadir: "${projectDir}" + "/meta/pages",
//                tmpdir: "${buildDir}/tmpPages",
//                targetdir: "${projectDir}/blanco/main/typescript",
//                targetStyle: "free",
//                sheetType: 'php',
//                encoding: getProperty("blanco.encoding"),
//                verbose: "true",
//                tabs: 4,
//                searchTmpdir: "${buildDir}/tmpComponents,${buildDir}/tmpObjects",
//                lineSeparator: 'LF',
//                listClass: "pages.RouteSettings"
//        )
        ant.blancovuecomponent(metadir: "${projectDir}" + "/meta/samples/pages",
                tmpdir: "${buildDir}/tmpPages",
                targetdir: "${projectDir}/blanco/main/typescript",
                targetStyle: "free",
                sheetType: 'php',
                encoding: getProperty("blanco.encoding"),
                verbose: "true",
                tabs: 4,
                searchTmpdir: "${buildDir}/tmpComponents,${buildDir}/tmpObjects",
                lineSeparator: 'LF',
                listClass: "samples.pages.RouteSettings"
        )
    }
}

task metaValidate {
    dependsOn "metaPages"
    logging.captureStandardOutput LogLevel.INFO
    group "blanco"
    description "Generate validator for typescript by blancoVeeValidate"
    doFirst {
        println 'A task message which is logged at INFO level'
    }
    doLast {
        ant.taskdef(name: 'blancoveevalidate',
                classname: 'blanco.veevalidate.task.BlancoVeeValidateTask',
                classpath: configurations.blancoFramework.asPath
        )
        ant.blancoveevalidate(metadir: "${projectDir}" + "/meta/validators",
                tmpdir: "${buildDir}/tmpValidate",
                targetdir: "${projectDir}/blanco/main/typescript",
                targetStyle: "free",
                sheetType: 'php',
                encoding: getProperty("blanco.encoding"),
                verbose: "true",
                tabs: 4,
                searchTmpdir: "${buildDir}/tmpObjects",
                lineSeparator: 'LF'
        )
    }
}

task meta(dependsOn: [metaLabels, metaMessages, metaValidate]) {
    logging.captureStandardOutput LogLevel.INFO
    group "blanco"
    description "Generate dapanda-front-core sources for typescript by blancoFramework"
}

clean.doFirst {
    delete "${projectDir}/blanco/"
}
